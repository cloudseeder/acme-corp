(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.arrayOrganizer = {}));
}(this, (function (exports) { 'use strict';

  function n(t){return (n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(t)}!function(){try{window;}catch(n){return global}}();(function(){try{return window}catch(n){return global}}());var h=function(){try{return window}catch(n){return global}}();function g(n){return "string"==typeof n}function S(n){return void 0===n}function N(n){return null===n}function j(n){return "function"==typeof n}function k(t){return "object"===n(t)}function E(n){return S(null==n?void 0:n.length)&&(null==n?void 0:n.constructor)===Object}function F(n){return Array.isArray(n)}function W(n){return (null==n?void 0:n.length)>0}function H(n){return !!j(h.Symbol)&&"function"==typeof(null==n?void 0:n[Symbol.iterator])}function L(n){return !!j(h.Map)&&n instanceof Map}function B(n){return !!j(h.Set)&&n instanceof Set}function q(n){for(var t in n)if(Object.prototype.hasOwnProperty.call(n,t))return !1;return !0}function D(n){try{return E(JSON.parse(n))}catch(n){return !1}}function R(n){try{return F(JSON.parse(n))}catch(n){return !1}}function z(n){return D(n)||R(n)}

  function bindToFunction(v, _this) {
    var defaultV = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};
    var f = j(v) ? v : defaultV;

    if (!S(_this) && !N(_this)) {
      f = f.bind(_this);
    }

    return f;
  }

  function _from() {
    var _this2 = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (Array.from) {
      return Array.from.apply(Array, args);
    } else {
      var toStr = Object.prototype.toString;

      var isCallable = function (fn) {
        return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
      };

      var toInteger = function (value) {
        var number = Number(value);

        if (isNaN(number)) {
          return 0;
        }

        if (number === 0 || !isFinite(number)) {
          return number;
        }

        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
      };

      var maxSafeInteger = Math.pow(2, 53) - 1;

      var toLength = function (value) {
        var len = toInteger(value);
        return Math.min(Math.max(len, 0), maxSafeInteger);
      }; // The length property of the from method is 1.


      return function (arrayLike
      /*, mapFn, thisArg */
      ) {
        // 1. Let C be the this value.
        var C = _this2; // 2. Let items be ToObject(arrayLike).

        var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).

        if (arrayLike == null) {
          throw new TypeError('Array.from requires an array-like object - not null or undefined');
        } // 4. If mapfn is undefined, then let mapping be false.


        var mapFn = args.length > 1 ? args[1] : void undefined;
        var T;

        if (typeof mapFn !== 'undefined') {
          // 5. else
          // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
          if (!isCallable(mapFn)) {
            throw new TypeError('Array.from: when provided, the second argument must be a function');
          } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.


          if (args.length > 2) {
            T = args[2];
          }
        } // 10. Let lenValue be Get(items, "length").
        // 11. Let len be ToLength(lenValue).


        var len = toLength(items.length); // 13. If IsConstructor(C) is true, then
        // 13. a. Let A be the result of calling the [[Construct]] internal method
        // of C with an argument list containing the single item len.
        // 14. a. Else, Let A be ArrayCreate(len).

        var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.

        var k = 0; // 17. Repeat, while k < len… (also steps a - h)

        var kValue;

        while (k < len) {
          kValue = items[k];

          if (mapFn) {
            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
          } else {
            A[k] = kValue;
          }

          k += 1;
        } // 18. Let putStatus be Put(A, "length", len, true).


        A.length = len; // 20. Return A.

        return A;
      }.apply(void 0, args);
    }
  }
  function _of() {
    if (Array.of) {
      return Array.of.apply(Array, arguments);
    } else {
      var _Array$prototype$slic;

      return (_Array$prototype$slic = Array.prototype.slice).call.apply(_Array$prototype$slic, arguments);
    }
  } // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin

  function _copyWithin() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var v = args[0];
    var newArgs = args.slice(1);

    if (Array.prototype.copyWithin) {
      return v.copyWithin.apply(v, newArgs);
    } else {
      return function (target, start) {
        var O = Object(v); // Steps 3-5.

        var len = O.length >>> 0; // Steps 6-8.

        var relativeTarget = target >> 0;
        var to = relativeTarget < 0 ? Math.max(len + relativeTarget, 0) : Math.min(relativeTarget, len); // Steps 9-11.

        var relativeStart = start >> 0;
        var from = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len); // Steps 12-14.

        var end = args[2];
        var relativeEnd = end === undefined ? len : end >> 0;
        var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len); // Step 15.

        var count = Math.min(final - from, len - to); // Steps 16-17.

        var direction = 1;

        if (from < to && to < from + count) {
          direction = -1;
          from += count - 1;
          to += count - 1;
        } // Step 18.


        while (count > 0) {
          if (from in O) {
            O[to] = O[from];
          } else {
            delete O[to];
          }

          from += direction;
          to += direction;
          count--;
        } // Step 19.


        return O;
      }.apply(void 0, newArgs);
    }
  } // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/fill

  function _fill() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var v = args[0];
    var newArgs = args.slice(1);

    if (Array.prototype.fill) {
      return v.fill.apply(v, newArgs);
    } else {
      return function (value) {
        var O = Object(v); // Steps 3-5.

        var len = O.length >>> 0; // Steps 6-7.

        var start = args[1];
        var relativeStart = start >> 0; // Step 8.

        var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len); // Steps 9-10.

        var end = args[2];
        var relativeEnd = end === undefined ? len : end >> 0; // Step 11.

        var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len); // Step 12.

        while (k < final) {
          O[k] = value;
          k++;
        } // Step 13.


        return O;
      }.apply(void 0, newArgs);
    }
  } // https://tc39.github.io/ecma262/#sec-array.prototype.find

  function _find() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    var v = args[0];
    var newArgs = args.slice(1);

    if (Array.prototype.find) {
      return v.find.apply(v, newArgs);
    } else {
      return function (predicate) {
        var o = Object(v); // 2. Let len be ? ToLength(? Get(O, "length")).

        var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.

        if (typeof predicate !== 'function') {
          throw new TypeError('predicate must be a function');
        } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.


        var thisArg = args[1]; // 5. Let k be 0.

        var k = 0; // 6. Repeat, while k < len

        while (k < len) {
          // a. Let Pk be ! ToString(k).
          // b. Let kValue be ? Get(O, Pk).
          // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
          // d. If testResult is true, return kValue.
          var kValue = o[k];

          if (predicate.call(thisArg, kValue, k, o)) {
            return kValue;
          } // e. Increase k by 1.


          k++;
        } // 7. Return undefined.


        return undefined;
      }.apply(void 0, newArgs);
    }
  } // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex

  function _findIndex() {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    var v = args[0];
    var newArgs = args.slice(1);

    if (Array.prototype.findIndex) {
      return v.findIndex.apply(v, newArgs);
    } else {
      return function (predicate) {

        if (typeof predicate !== 'function') {
          throw new TypeError('predicate must be a function');
        }

        var list = Object(v);
        var length = list.length >>> 0;
        var thisArg = args[1];
        var value;

        for (var i = 0; i < length; i++) {
          value = list[i];

          if (predicate.call(thisArg, value, i, list)) {
            return i;
          }
        }

        return -1;
      }.apply(void 0, newArgs);
    }
  } // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/flat

  function _flat() {
    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }

    if (Array.prototype.flat) {
      var v = args[0];
      var newArgs = args.slice(1);
      return v.flat.apply(v, newArgs);
    } else {
      return function flatDeep(arr) {
        var d = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        return d > 0 ? arr.reduce(function (acc, val) {
          return acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val);
        }, []) : arr.slice();
      }.apply(void 0, args);
    }
  } // https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap

  function _flatMap() {
    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      args[_key7] = arguments[_key7];
    }

    if (Array.prototype.flatMap) {
      var v = args[0];
      var newArgs = args.slice(1);
      return v.flatMap.apply(v, newArgs);
    } else {
      return function (arr, f, _this) {
        var _f = bindToFunction(f, _this);

        return arr.reduce(function (acc, vv) {
          return acc.concat(_f === null || _f === void 0 ? void 0 : _f(vv));
        }, []);
      }.apply(void 0, args);
    }
  }

  function splice(v) {
    var arr = toArray(v);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    arr.splice.apply(arr, args);
    return arr;
  }

  function toNumber(v) {
    var nv = Number(v);

    if (isFinite(nv)) {
      return nv;
    }

    if (g(v)) {
      var arr = _from(v);

      var ret = 0;
      arr.forEach(function (vv) {
        ret += vv.charCodeAt(0);
      });
      return ret;
    }

    return 0;
  }

  function ascOperator(v1, v2) {
    return toNumber(v1) - toNumber(v2);
  }

  function descOperator(v1, v2) {
    return toNumber(v2) - toNumber(v1);
  }

  function deepTruly(v, _ref) {
    var _ref$fAtNotObject = _ref.fAtNotObject,
        fAtNotObject = _ref$fAtNotObject === void 0 ? function () {} : _ref$fAtNotObject,
        _ref$fAtObject = _ref.fAtObject,
        fAtObject = _ref$fAtObject === void 0 ? function () {} : _ref$fAtObject;
    var stacks = [{
      v: v
    }];
    var stack;

    var _loop = function () {
      var _stack = stack,
          container = _stack.container,
          k$1 = _stack.k,
          v = _stack.v;

      switch (true) {
        // null is object
        case !k(v) && !j(v) || N(v):
          {
            // Maybe it will be most of primitive type
            if (fAtNotObject(v, k$1, container)) {
              return {
                v: true
              };
            }

            break;
          }

        default:
          {
            if (fAtObject(v, k$1, container)) {
              return {
                v: true
              };
            }

            forEach(v, function (vv, kk) {
              stacks.push({
                container: v,
                k: kk,
                v: vv
              });
            });
            break;
          }
      }
    };

    while (stack = stacks.shift()) {
      var _ret = _loop();

      if (typeof _ret === "object") return _ret.v;
    }

    return false;
  }
  /**
   * Iterable object like string, Array, Map, Set, Generator iterable...
   * @private
   * @typedef {Object} Iterable
   */

  /**
   * This function will be call every element of an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} callback Function which will be call on every element of an iterable object or a plain object
   * @param {*} [context] Value which will be use as context(this) when executed callback function
   * @example
   * forEach('test', (v, k) => console.log(v)); // 't', 'e', 's', 't'
   */


  function forEach(v, callback, context) {
    var _callback = bindToFunction(callback, context, function (v) {
      return v;
    });

    if (g(v) && z(v)) {
      v = JSON.parse(v);
    }

    switch (true) {
      // array like object(String, Array, arguments ...), iterable object(Map, Set, Generator iterator ...)
      // If IE 11 browser, it supported Map object and Set object so i added isMap() and isSet() to in below condition
      case W(v) || L(v) || B(v) || H(v):
        {
          switch (true) {
            case L(v):
              {
                v.forEach(function (vv, k) {
                  _callback(vv, k);
                });
                break;
              }

            case B(v):
              {
                v.forEach(function (vv, k) {
                  _callback(vv, k);
                });
                break;
              }

            default:
              {
                _from(v, callback, context);
              }
          }

          break;
        }

      default:
        {
          if (!q(v)) {
            Object.keys(v).forEach(function (k) {
              _callback(v[k], k);
            });
          }

          break;
        }
    }
  }
  /**
   * This function converts an any value to new an array object
   * @param {*} v An any value
   * @param {function} [callback] Function which will be call on every element of an iterable object or a plain object
   * @param {*} [context] Value which will be use as context(this) when executed callback function
   * @returns {Array}
   * @example
   * toArrayAll(undefined) // [undefined]
   */

  function toArrayAll(v, callback, context) {
    switch (true) {
      case g(v) && !v.length:
        {
          return [v];
        }

      case !k(v) && !g(v) || N(v):
        {
          return [v];
        }

      default:
        {
          return toArray(v, callback, context);
        }
    }
  }
  /**
   * This function converts an iterable object or a plain object to new an array object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} [callback] Function which will be call on every element of an iterable object or a plain object
   * @param {*} [context] Value which will be use as context(this) when executed callback function
   * @returns {Array}
   * @example
   * toArray({ x: 1, y: 2, z: 3 }); // [{ k: 'x', v: 1 }, { k: 'y', v: 2 }, { k: 'z', v: 3 }]
   */

  function toArray(v, callback, context) {
    var _callback = bindToFunction(callback, context, function (v) {
      return v;
    });

    var _mapCallback = bindToFunction(callback, context, function (v, k) {
      return {
        k: k,
        v: v
      };
    });

    var arr = [];

    if (L(v) || E(v)) {
      forEach(v, function (vv, k) {
        arr.push(_mapCallback(vv, k));
      });
    } else {
      forEach(v, function (vv, k) {
        arr.push(_callback(vv, k));
      });
    }

    return arr;
  }
  /**
   * This function returns new an array object which includes an every arguments
   * @param {*} values Values which will be included
   * @returns {Array}
   * @example
   * of(1, 2, 3, 4); // [1, 2, 3, 4]
   */

  function of() {
    return _of.apply(void 0, arguments);
  }
  /**
   * This function returns new an array object which merged as an argument values
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {*} values Values which will be merged
   * @returns {Array}
   * @example
   * concat({ x: 1, y: 2, z: 3 }, { xx: 1, yy: 2, zz: 3 }, { xxx: 1, yyy: 2, zzz: 3 }) // [{ k: 'x', 1 } ... { k: 'xxx', v: 1 }])
   */

  function concat(v) {
    var ret = toArray(v);

    for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      values[_key2 - 1] = arguments[_key2];
    }

    values.forEach(function (vv) {
      if (!k(vv) || N(vv) || j(vv)) {
        ret = ret.concat([vv]);
      } else {
        ret = ret.concat(toArray(vv));
      }
    });
    return ret;
  }
  /**
   * This function returns index of found value from an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} callback Function which will be call on every element of an iterable object or a plain object
   * @param {number} [fromIndex=0] Start index which will be search
   * @returns {number}
   * @example
   * indexOf([1, 2, 3], v => v === 2); // 1
   */

  function indexOf(v, callback, fromIndex) {
    var _callback = bindToFunction(callback, null, function (v) {
      return v;
    });

    var _v = toArray(v);

    var _fromIndex = toNumber(fromIndex);

    if (_fromIndex < 0) {
      _fromIndex = 0;
    }

    for (var i = _fromIndex; i < _v.length; i++) {
      var vv = _v[i];

      if (_callback(vv)) {
        return i;
      }
    }

    return -1;
  }
  /**
   * This function returns index of found value from an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} callback Function which will be call on every element of an iterable object or a plain object
   * @param {number} [fromIndex=Iterable.length - 1] Start index which will be search from last index
   * @returns {number}
   * @example
   * lastIndexOf([1, 2, 3], v => v === 3); // 2
   */

  function lastIndexOf(v, callback, fromIndex) {
    var _callback = bindToFunction(callback, null, function (v) {
      return v;
    });

    var _v = toArray(v);

    var _fromIndex = toNumber(fromIndex);

    var length = _v.length;

    if (S(fromIndex) || _fromIndex >= length) {
      _fromIndex = length - 1;
    }

    for (var i = _fromIndex; i >= 0; i--) {
      var vv = _v[i];

      if (_callback(vv)) {
        return i;
      }
    }

    return -1;
  }
  /**
   * This function returns joined value as a separator from every elements of an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {*} separator separate value
   * @returns {string}
   * @example
   * join({ x: 1, y: 2, z: 3 }, '-') // '1-2-3'
   */

  function join(v, separator) {
    return toArray(v, function (vv) {
      return vv;
    }).join(separator);
  }
  /**
   * This function returns index of found value from an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @returns {Array}
   * @example
   * keys([1, , 3]) // [0, 1, 2]
   */

  function keys(v) {
    return toArray(v, function (vv, k) {
      return k;
    });
  }
  /**
   * This function returns index of found value from an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @returns {Array}
   * @example
   * values({ x: 1, y: 2, z: 3 }) // [1, 2, 3]
   */

  function values(v) {
    return toArray(v, function (vv) {
      return vv;
    });
  }
  /**
   * This function returns new array object which included every elements copied from start index until end index
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {number} targetIndex Target index which to copied
   * @param {number} [start=0] Start index which to start copying
   * @param {number} [end=Iterable.length] End index which to end copying
   * @returns {Array}
   * @example
   * copyWithin({ x: 1, y: '2', z: 3 }, 0, 1, 2) // [ { k: 'y', v: '2' }, { k: 'y', v: '2' }, { k: 'z', v: 3 } ]
   */

  function copyWithin(v, targetIndex, start, end) {
    return _copyWithin(toArray(v), targetIndex, start, end);
  }
  /**
   * This function filters given an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} [callback] Function which will be call on every element of an iterable object or a plain object
   * @param {*} [context] Value which will be use as context(this) when executed callback function
   * @returns {Array}
   * @example
   * filter(['1', 2, 3], v => typeof v === 'number') // [2, 3]
   */

  function filter(v, callback, context) {
    var _v = toArray(v);

    return _v.filter(callback, context);
  }
  /**
   * This function returns a true when match condition of callback function to every elements of an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} [callback] Function which will be call on every element of an iterable object or a plain object
   * @param {*} [context] Value which will be use as context(this) when executed callback function
   * @returns {boolean}
   * @example
   * every([1, 2, 3], v => typeof v === 'number') // true
   */

  function every(v, callback, context) {
    var _v = toArray(v);

    return _v.every(callback, context);
  }
  /**
   * This function returns a true when match condition of callback function to some elements of an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} [callback] Function which will be call on every element of an iterable object or a plain object
   * @param {*} [context] Value which will be use as context(this) when executed callback function
   * @returns {boolean}
   * @example
   * some(['1', 2, 3], v => typeof v === 'number') // true
   */

  function some(v, callback, context) {
    var _v = toArray(v);

    return _v.some(callback, context);
  }
  /**
   * This function returns new array object which filled a value from start index until end index
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {*} vv Value which will be filled
   * @param {number} [start=0] Start index
   * @param {number} [end=Iterable.length] End index
   * @returns {Array}
   * @example
   * fill({ x: 11, y: 22, z: 33 }, 7, 0, 2) // [ 7, 7, { k: 'z', v: 33 } ]
   */

  function fill(v, vv, start, end) {
    return _fill(toArray(v), vv, start, end);
  }
  /**
   * This function returns a first element found from an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} callback Function which will be call on every element of an iterable object or a plain object
   * @param {*} [context] Value which will be use as context(this) when executed callback function
   * @returns {*}
   * @example
   * find(['1', 2, 3], v => typeof v === 'number') // 2
   */

  function find(v, callback, context) {
    return _find(toArray(v), callback, context);
  }
  /**
   * This function returns an index of first element found from an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} callback Function which will be call on every element of an iterable object or a plain object
   * @param {*} [context] Value which will be use as context(this) when executed callback function
   * @returns {number}
   * @example
   * findIndex(['1', 2, 3], v => typeof v === 'number') // 1
   */

  function findIndex(v, callback, context) {
    return _findIndex(toArray(v), callback, context);
  }
  /**
   * This function returns a first element found from an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} callback Function which will be call on every element of an iterable object or a plain object
   * @param {*} [context] Value which will be use as context(this) when executed callback function
   * @returns {Object}
   * @example
   * deepFind([{ x: { xx: { y: 3, z: 'A' } } }], v => typeof v === 'number') // { c: { y: 3, z: 'A' }, k: 'y', v: 3, origin: [{ ... }] }
   */

  function deepFind(v, callback, context) {
    var _callback = bindToFunction(callback, context, function () {});

    var ret;

    var checker = function (vv, k, c) {
      if (_callback(vv, k, c)) {
        ret = {
          v: vv,
          k: k,
          c: c,
          origin: v
        };
      }
    };

    deepTruly(v, {
      fAtNotObject: checker
    });
    return ret;
  }
  /**
   * This function returns new array object which included all sub-array elements
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {number} [depth] Depth level specifying how deep a nested array structure should be flattened
   * @returns {Array}
   * @example
   * flat(['1', [2, 3, 4], [5, 6, 2, [8, 9]]], 2) // ['1', 2, 3, 4, 5, 6, 2, 8, 9]
   */

  function flat(v, depth) {
    return _flat(toArray(v), depth);
  }
  /**
   * This function returns new array object formed by applying a given callback function to each element of an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} callback Function which will be call on every element of an iterable object or a plain object
   * @param {*} [context] Value which will be use as context(this) when executed callback function
   * @returns {Array}
   * @example
   * flatMap(['1', [2, 3, 4], [5, 6, 7, [8, 9]]], v => v.slice(0)) // ['1', 2, 3, 4, 5, 6, 7, [8, 9]]
   */

  function flatMap(v, callback, context) {
    return _flatMap(toArray(v), callback, context);
  }
  /**
   * This function returns whether in an array includes certain value and is not
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} callback Target Value which will be search
   * @param {number} [start] Start index which to searching
   * @returns {boolean}
   * @example
   * includes([1, 2, 3], v => v === 2) // true
   */

  function includes(v, callback, start) {
    return indexOf(v, callback, start) > -1;
  }
  /**
   * This function returns new array object sorted to ascending
   * @param {Iterable|Object} v An iterable object or a plain object
   * @returns {Array}
   * @example
   * asc({ x: 'd', y: null, z: 0xff }) // [null, 'd', 255]
   */

  function asc(v) {
    return toArray(v, function (vv) {
      return vv;
    }).sort(function (v1, v2) {
      return ascOperator(v1, v2);
    });
  }
  /**
   * This function returns new array object sorted to descending
   * @param {Iterable|Object} v An iterable object or a plain object
   * @returns {Array}
   * @example
   * desc(['d', true, undefined, 0xff, 'ee', [], 2e4, () => {}, 't', 0]) // [20000, 255, 'ee', 't', 'd', true, Array(0), f (), 0, undefined]
   */

  function desc(v) {
    return toArray(v, function (vv) {
      return vv;
    }).sort(function (v1, v2) {
      return descOperator(v1, v2);
    });
  }
  /**
   * This function returns new array object sorted ascending by object key
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {string} key
   * @returns {Array}
   * @example
   * ascBy([{ x: 1, y: 11 }, { x: 2, y: 22 }, { x: 3, y: 33 }], 'y') // [{ ...y: 11 }, { ...y: 22 }, { ...y: 33 }]
   */

  function ascBy(v, key) {
    return toArray(v, function (vv) {
      return vv;
    }).sort(function (v1, v2) {
      var _v1 = v1;
      var _v2 = v2;

      if (key) {
        var _deepFind, _deepFind2;

        _v1 = (_deepFind = deepFind(v1, function (v, k) {
          return k === key;
        })) === null || _deepFind === void 0 ? void 0 : _deepFind.v;
        _v2 = (_deepFind2 = deepFind(v2, function (v, k) {
          return k === key;
        })) === null || _deepFind2 === void 0 ? void 0 : _deepFind2.v;
      }

      return ascOperator(_v1, _v2);
    });
  }
  /**
   * This function returns new array object sorted descending by object key
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {string} key
   * @returns {Array}
   * @example
   * descBy([{ x: 1, y: 11 }, { x: 2, y: 22 }, { x: 3, y: 33 }], 'y') // [{ ...y: 33 }, { ...y: 22 }, { ...y: 11 }]
   */

  function descBy(v, key) {
    return toArray(v, function (vv) {
      return vv;
    }).sort(function (v1, v2) {
      var _v1 = v1;
      var _v2 = v2;

      if (key) {
        var _deepFind3, _deepFind4;

        _v1 = (_deepFind3 = deepFind(v1, function (v, k) {
          return k === key;
        })) === null || _deepFind3 === void 0 ? void 0 : _deepFind3.v;
        _v2 = (_deepFind4 = deepFind(v2, function (v, k) {
          return k === key;
        })) === null || _deepFind4 === void 0 ? void 0 : _deepFind4.v;
      }

      return descOperator(_v1, _v2);
    });
  }
  /**
   * This function inserts a value from first index of an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {*} values Values which will be inserted
   * @returns {Array}
   * @example
   * unshift([1, 2, 3], 11, 22, 33) // [ 11, 22, 33, 1, 2, 3 ]
   */

  function unshift(v) {
    for (var _len3 = arguments.length, values = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      values[_key3 - 1] = arguments[_key3];
    }

    return splice.apply(void 0, [v, 0, 0].concat(values));
  }
  /**
   * This function inserts a value from last index of an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {*} values Values which will be inserted
   * @returns {Array}
   * @example
   * push([1, 2, 3], 11, 22, 33) // [ 1, 2, 3, 11, 22, 33 ]
   */

  function push(v) {
    var length = toNumber(v === null || v === void 0 ? void 0 : v.length);

    for (var _len4 = arguments.length, values = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      values[_key4 - 1] = arguments[_key4];
    }

    return splice.apply(void 0, [v, length, 0].concat(values));
  }
  /**
   * This function inserts a value from a target index of an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {number} targetIndex Target index
   * @param {*} values Values which will be inserted
   * @returns {Array}
   * @example
   * insert([1, 2, 3, 4], 1, 22) // [1, 22, 2, 3, 4]
   */

  function insert(v, targetIndex) {
    for (var _len5 = arguments.length, values = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
      values[_key5 - 2] = arguments[_key5];
    }

    return splice.apply(void 0, [v, targetIndex, 0].concat(values));
  }
  /**
   * This function replaces from target index value of an iterable object or a plain object to new values
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {number} targetIndex Target index
   * @param {*} values Values which will be replaced
   * @returns {Array}
   * @example
   * replace([1, 2, 3, 4], 2, 33, 'ADD') // [1, 2, 33, 'ADD', 4]
   */

  function replace(v, targetIndex) {
    for (var _len6 = arguments.length, values = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
      values[_key6 - 2] = arguments[_key6];
    }

    return splice.apply(void 0, [v, targetIndex, 1].concat(values));
  }
  /**
   * This function removes a value at a target index of an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a plain object
   * @param {function} callback Function which will be call on every element of an iterable object or a plain object
   * @param {number} [fromIndex=0] Start index which will be search
   * @returns {Array}
   * @example
   * remove(['1', 2, 3, 4], v => typeof v === 'number'); // ['1']
   */

  function remove(v, callback) {
    var fromIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    var _callback = bindToFunction(callback, null, function (v) {
      return v;
    });

    var _v = toArray(v);

    var ret = [];

    for (var i = fromIndex; i < _v.length; i++) {
      var vv = _v[i];

      if (!_callback(vv)) {
        ret.push(vv);
      }
    }

    return ret;
  }
  /**
   * This function returns new array object shuffled as the random
   * @param {Iterable|Object} v An iterable object or a plain object
   * @returns {Array}
   * @example
   * shuffle([1, 2, 3, 4]) // [3, 1, 2, 4]
   */

  function shuffle(v) {
    var _v = toArray(v);

    var length = _v.length;

    for (var i = length; --i;) {
      var r = Math.floor(Math.random() * i);
      var ii = i - 1;
      var tmp = _v[ii];
      _v[ii] = v[r];
      _v[r] = tmp;
    }

    return _v;
  }
  /**
   * This function return new object accumulated every value of an iterable object or a plain object
   * @param {Iterable|Object} v An iterable object or a Plain object
   * @param {function} callback Function which will be call on every element of an iterable object or a plain object
   * @param {Object} initV init object
   * @returns {*}
   * @example
   * reduce([{ x: 1 }, { y: 2 }, { z: 3 }], (acc, v, k) => { acc[k] = v; return acc; }, {}) // { 0: { x: 1 }, 1: { y: 2 }, 2: { z: 3 } }
   */

  function reduce(v, callback, initV) {
    var _callback = bindToFunction(callback, null, function (acc) {
      return acc;
    });

    var acc = initV;
    forEach(v, function (vv, k) {
      acc = !S(acc) ? acc : vv;
      acc = _callback(acc, vv, k, v);
    });
    return acc;
  } // /**
  //  * This function returns a first element found from an iterable object or a plain object
  //  * @param {Iterable|Object} v An iterable object or a plain object
  //  * @param {*} searchValue Value which will be search
  //  * @returns {*}
  //  * @example
  //  * search(['1', 2, 3], 3) // 3
  //  */
  // export function search(v, searchValue) {
  //   return find(v, vv => isEqual(searchValue, vv));
  // }
  //
  // /**
  //  * This function returns an index of first element found from an iterable object or a plain object
  //  * @param {Iterable|Object} v An iterable object or a plain object
  //  * @param {*} searchValue Value which will be search
  //  * @returns {number}
  //  * @example
  //  * searchIndex(['1', 2, 3], '1') // 0
  //  */
  // export function searchIndex(v, searchValue) {
  //   return findIndex(v, vv => isEqual(searchValue, vv));
  // }
  //
  // /**
  //  * This function returns a first element found from an iterable object or a plain object
  //  * @param {Iterable|Object} v An iterable object or a plain object
  //  * @param {*} searchValue Value which will be search
  //  * @returns {Object}
  //  * @example
  //  * deepSearch(['1', 2, 3], 3) // { c: ['1', 2, 3], k: 2, v: 3, origin: [...] }
  //  */
  // export function deepSearch(v, searchValue) {
  //   return deepFind(v, vv => isEqual(searchValue, vv));
  // }
  // /**
  //  * This function inserts a value from then on before of target index of an iterable object or a plain object
  //  * @param {Iterable|Object} v An iterable object or a plain object
  //  * @param {number} targetIndex Target index
  //  * @param {*} values Values which will be inserted
  //  * @returns {Array}
  //  * @example
  //  * insertBefore([1, 2, 3], 2, 22, 33) // [ 1, 22, 33, 2, 3 ]
  //  */
  // export function insertBefore(v, targetIndex, ...values) {
  //   const length = toNumber(v?.length);
  //   let _targetIndex;
  //
  //   if (targetIndex <= 0) {
  //     _targetIndex = 0;
  //   } else if (targetIndex >= length) {
  //     _targetIndex = length;
  //   } else {
  //     _targetIndex = targetIndex - 1;
  //   }
  //
  //   return splice(v, _targetIndex, 0, ...values);
  // }
  //
  // /**
  //  * This function inserts a value from then on after of target index of an iterable object or a plain object
  //  * @param {Iterable|Object} v An iterable object or a plain object
  //  * @param {number} targetIndex Target index
  //  * @param {*} values Values which will be inserted
  //  * @returns {Array}
  //  * @example
  //  * insertAfter([1, 2, 3], 1, 22, 33) // [ 1, 2, 22, 33, 3 ]
  //  */
  // export function insertAfter(v, targetIndex, ...values) {
  //   const length = toNumber(v?.length);
  //   let _targetIndex;
  //
  //   if (targetIndex <= 0) {
  //     _targetIndex = 0;
  //   } else if (targetIndex >= length) {
  //     _targetIndex = length;
  //   } else {
  //     _targetIndex = targetIndex + 1;
  //   }
  //
  //   return splice(v, _targetIndex, 0, ...values);
  // }
  // /**
  //  * This function removes a value from a target index of an iterable object or a plain object
  //  * @param {Iterable|Object} v An iterable object or a plain object
  //  * @param {number} targetIndex Target index
  //  * @returns {Array}
  //  * @example
  //  * removeAll([1, 2, 3, 4], 1) // [1]
  //  */
  //
  // export function removeAll(v, targetIndex) {
  //   return splice(v, targetIndex);
  // }
  // /**
  //  * This function returns last index of an iterable object or a plain object
  //  * @param {Iterable|Object} v An iterable object or a plain object
  //  * @returns {number}
  //  * @example
  //  * lastIndex([1, 2, 3, 4]) // 3
  //  */
  // export function lastIndex(v) {
  //   const { length } = toArray(v);
  //   return length > 0 ? length - 1 : 0;
  // }

  exports.asc = asc;
  exports.ascBy = ascBy;
  exports.concat = concat;
  exports.copyWithin = copyWithin;
  exports.deepFind = deepFind;
  exports.desc = desc;
  exports.descBy = descBy;
  exports.every = every;
  exports.fill = fill;
  exports.filter = filter;
  exports.find = find;
  exports.findIndex = findIndex;
  exports.flat = flat;
  exports.flatMap = flatMap;
  exports.forEach = forEach;
  exports.includes = includes;
  exports.indexOf = indexOf;
  exports.insert = insert;
  exports.join = join;
  exports.keys = keys;
  exports.lastIndexOf = lastIndexOf;
  exports.of = of;
  exports.push = push;
  exports.reduce = reduce;
  exports.remove = remove;
  exports.replace = replace;
  exports.shuffle = shuffle;
  exports.some = some;
  exports.toArray = toArray;
  exports.toArrayAll = toArrayAll;
  exports.unshift = unshift;
  exports.values = values;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
